# -*- coding: utf-8 -*-
"""my_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ggM2o1ccskT1v_LGJYm1LwSmd29ykx9I
"""

import pandas as pd
import re
import nltk
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
#import emoji
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import joblib
import keras
import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.models import load_model

import streamlit as st
import joblib

def get_wordnet_pos(tag):
    if tag.startswith('J'):
        return wordnet.ADJ
    elif tag.startswith('V'):
        return wordnet.VERB
    elif tag.startswith('N'):
        return wordnet.NOUN
    elif tag.startswith('R'):
        return wordnet.ADV
    else:
        return wordnet.NOUN

# Initialize the WordNetLemmatizer
lemmatizer = WordNetLemmatizer()

custom_stopwords = set(['i', 'me', 'my', 'myself', 'we', 'our', 'ours',
'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself',
'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself',
'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves',
 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are',
 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing',
 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for',
'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to',
'from', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once',
'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most',
'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very',
's', 't', 'can', 'will', 'just', 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y'])

# Function to add spaces around emojis
#def extract_emojis(s):
   # return ''.join((' ' + c + ' ') if c in emoji.EMOJI_DATA else c for c in s)

# Pre-processing function
def preprocess_text(text, custom_stopwords):
    text = text.lower()
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
    text = re.sub(r'@\w+', '', text)
    text = re.sub(r'#', '', text)
    text = re.sub(r'\$\w+', '', text)
    text = re.sub(r'rt\s+', '', text)
   #text = extract_emojis(text)
   #text = emoji.demojize(text)
    text = re.sub(r'[^A-Za-z\s]', '', text)
    words = word_tokenize(text)
    pos_tags = nltk.pos_tag(words)
    lemmatized_words = [lemmatizer.lemmatize(word, get_wordnet_pos(tag)) for word, tag in pos_tags if word not in custom_stopwords]
    return ' '.join(lemmatized_words)

# Charger le modèle RNN
rnn_model = load_model('./rnn_model.h5')

# Définir les paramètres de tokenisation
tokenizer = joblib.load('./tokenizer.pickle')

# Fonction pour prédire le sentiment
def predict_sentiment(tweet):
    tweet_seq = tokenizer.texts_to_sequences([tweet])
    tweet_pad = pad_sequences(tweet_seq, maxlen=150)
    pred_prob = rnn_model.predict(tweet_pad).ravel()[0]
    return 'Bullish' if pred_prob > 0.5 else 'Bearish'

# Interface Streamlit
st.title('Sentiment Analysis for Stock Tweets')
st.write('Enter a tweet with a stock tag like §AAPL and click on Predict to see the sentiment.')

# Entrée de l'utilisateur
tweet = st.text_area('Entrez votre message :')

# Bouton de prédiction
if st.button('Predict'):
    if tweet:
        if len(tweet) > 300:
            st.write('Nombre de caractère maximal dépassé.')
        else:
            tweet = preprocess_text(tweet, custom_stopwords)
            sentiment = predict_sentiment(tweet)
            st.write(f'The predicted sentiment is: **{sentiment}**')
    else:
        st.write('Entre un message à prédire.')
